correct.counts = 0
for (i in 1:6){
correct.counts = correct.counts + accuracy.table[i,i]
}
accuracy.rate = correct.counts/dim(redwines)[1]
cat("Accuray: ", accuracy.rate)
output.tree <- rpart(quality ~ volatile.acidity + alcohol + sulphates,
data = redwines, method = 'class',
control = rpart.control(minsplit=100, cp=0))
prp(output.tree)
accuracy.table = table(predict(output.tree, redwines, type = 'class'),
redwines$quality)
colnames(accuracy.table) = c('Forecast # of Quality 3',
'Forecast # of Quality 4',
'Forecast # of Quality 5',
'Forecast # of Quality 6',
'Forecast # of Quality 7',
'Forecast # of Quality 8')
rownames(accuracy.table) = c('Actual # of Quality 3',
'Actual # of Quality 4',
'Actual # of Quality 5',
'Actual # of Quality 6',
'Actual # of Quality 7',
'Actual # of Quality 8')
accuracy.table
correct.counts = 0
for (i in 1:6){
correct.counts = correct.counts + accuracy.table[i,i]
}
accuracy.rate = correct.counts/dim(redwines)[1]
cat("Accuray: ", accuracy.rate)
output.tree <- rpart(quality ~ volatile.acidity + alcohol + sulphates,
data = redwines, method = 'class')
prp(output.tree)
accuracy.table = table(predict(output.tree, redwines, type = 'class'),
redwines$quality)
colnames(accuracy.table) = c('Forecast # of Quality 3',
'Forecast # of Quality 4',
'Forecast # of Quality 5',
'Forecast # of Quality 6',
'Forecast # of Quality 7',
'Forecast # of Quality 8')
rownames(accuracy.table) = c('Actual # of Quality 3',
'Actual # of Quality 4',
'Actual # of Quality 5',
'Actual # of Quality 6',
'Actual # of Quality 7',
'Actual # of Quality 8')
accuracy.table
correct.counts = 0
for (i in 1:6){
correct.counts = correct.counts + accuracy.table[i,i]
}
accuracy.rate = correct.counts/dim(redwines)[1]
cat("Accuray: ", accuracy.rate)
output.tree <- rpart(quality ~ volatile.acidity + alcohol + sulphates,
data = redwines, method = 'class',
control = rpart.control(minsplit=100, cp=0))
prp(output.tree)
accuracy.table = table(predict(output.tree, redwines, type = 'class'),
redwines$quality)
colnames(accuracy.table) = c('Forecast # of Quality 3',
'Forecast # of Quality 4',
'Forecast # of Quality 5',
'Forecast # of Quality 6',
'Forecast # of Quality 7',
'Forecast # of Quality 8')
rownames(accuracy.table) = c('Actual # of Quality 3',
'Actual # of Quality 4',
'Actual # of Quality 5',
'Actual # of Quality 6',
'Actual # of Quality 7',
'Actual # of Quality 8')
accuracy.table
correct.counts = 0
for (i in 1:6){
correct.counts = correct.counts + accuracy.table[i,i]
}
accuracy.rate = correct.counts/dim(redwines)[1]
cat("Accuray: ", accuracy.rate)
ggplot(aes(x = sulphates), data = subset(redwines, sulphates < 1.2)) +
geom_histogram(binwidth = 0.005) +
scale_x_log10(name = 'pH', breaks = seq(0,2,0.2))
ggplot(aes(x = sulphates), data = subset(redwines, sulphates < 1.2)) +
geom_histogram(binwidth = 0.005) +
scale_x_log10(name = 'sulphates', breaks = seq(0,2,0.2))
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
redwines$quality <- as.numeric(redwines$quality)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
summary(redwines$quality)
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
redwines[ , 1] <- NULL # remove the first column because it only represents the row numbers
redwines$quality <- as.factor(redwines$quality)
summary(redwines$quality)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_discrete(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_discrete(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
summary(redwines$quality)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
redwines$quality <- as.numeric.factor(redwines$quality)
summary(redwines$quality)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
redwines$quality <- as.numeric.factor(redwines$quality)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
warning()
summary(redwines$quality)
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
redwines[ , 1] <- NULL # remove the first column because it only represents the row numbers
summary(redwines$quality)
redwines$quality <- as.factor(redwines$quality)
summary(redwines$quality)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
redwines$quality <- as.numeric.factor(redwines$quality)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
ggplot(aes(x = sulphates, y = volatile.acidity, color = quality), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'volatile acidity') +
scale_color_brewer(palette="Accent")
redwines$quality <- as.factor(redwines$quality)
ggplot(aes(x = volatile.acidity, y = alcohol, color = quality), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'volatile acidity') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent")
ggplot(aes(x = sulphates, y = alcohol, color = quality), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent")
ggplot(aes(x = sulphates), data = subset(redwines, sulphates < 1.2)) +
geom_histogram(binwidth = 0.005) +
scale_x_log10(name = 'sulphates', breaks = seq(0,2,0.2)) +
ggtitle("Distribution of Sulphates (x-axis log transformed)")
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(gridExtra)
library(psych)
library(rpart)
library(rpart.plot)
ggplot(aes(x = sulphates), data = subset(redwines, sulphates < 1.2)) +
geom_histogram(binwidth = 0.005) +
scale_x_log10(name = 'sulphates', breaks = seq(0,2,0.2)) +
ggtitle("Distribution of Sulphates (x-axis log transformed)")
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
redwines[ , 1] <- NULL # remove the first column because it only represents the row numbers
dim(redwines)
remove(list=ls())
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(gridExtra)
library(psych)
library(rpart)
library(rpart.plot)
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
redwines[ , 1] <- NULL # remove the first column because it only represents the row numbers
dim(redwines)
duplicate_ind <- duplicated(redwines)
sum(duplicate_ind)
redwines <- redwines[!duplicate_ind,]
dim(redwines)
str(redwines)
summary(redwines)
# copy quality as factor, to make plotting easier in later analyses
redwines$quality.factor <- as.factor(redwines$quality)
ggplot(aes(x = sulphates), data = subset(redwines, sulphates < 1.2)) +
geom_histogram(binwidth = 0.005) +
scale_x_log10(name = 'sulphates', breaks = seq(0,2,0.2)) +
ggtitle("Distribution of Sulphates (x-axis log transformed)")
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9 - by quality')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9 - by quality')
grid.arrange(plot1, plot2)
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent") +
ggtitle()
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent")
# copy quality as factor, to make plotting easier in later analyses
redwines$quality <- as.factor(redwines$quality)
ggplot(aes(x = quality), data = redwines) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(name = 'quality', breaks = seq(3,8))
sort(table(redwines$quality), decreasing = TRUE)[1:6]
ggplot(aes(x = quality), data = redwines) +
geom_histogram(binwidth = 0.5) +
scale_x_discrete(name = 'quality', breaks = seq(3,8))
sort(table(redwines$quality), decreasing = TRUE)[1:6]
ggplot(aes(x = quality), data = redwines) +
geom_histogram(binwidth = 0.5) +
scale_x_discrete(name = 'quality')
sort(table(redwines$quality), decreasing = TRUE)[1:6]
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
redwines[ , 1] <- NULL # remove the first column because it only represents the row numbers
duplicate_ind <- duplicated(redwines)
sum(duplicate_ind)
redwines <- redwines[!duplicate_ind,]
# copy quality as factor, to make plotting easier in later analyses
redwines$quality.factor <- as.factor(redwines$quality)
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent") +
ggtitle()
ggplot(aes(x = sulphates, y = alcohol, color = quality), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent")
ggplot(aes(x = sulphates, y = alcohol, color = quality), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol')
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
labs(colour = "quality") +
scale_color_brewer(palette="Accent")
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
labs(colour = "quality") +
scale_color_brewer(palette="Accent") +
ggtitle("Quality against Sulphates and Alcohol")
setwd("~/Dropbox/eda/Project 4")
setwd("~/Dropbox/eda/Project 4")
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
# remove X because it only represents the row numbers
redwines$X <- NULL
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(gridExtra)
library(psych)
library(rpart)
library(rpart.plot)
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
# remove X because it only represents the row numbers
redwines$X <- NULL
dim(redwines)
redwines[244:245,]
# find duplicate record id
duplicate_ind <- duplicated(redwines)
# count total duplicates
sum(duplicate_ind)
# remove duplicates
redwines <- redwines[!duplicate_ind,]
# copy quality as factor, to make plotting easier in later analyses
redwines$quality.factor <- as.factor(redwines$quality)
ggplot(aes(x = volatile.acidity, y = fixed.acidity, color = citric.acid),
data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'volatile acidity') +
scale_y_continuous(name = 'fixed acidity') +
scale_color_gradient(low="blue", high="red") +
labs(colour = "citric acid") +
ggtitle("Citric Acid against Volatile and Fixed Acidity")
ggplot(aes(x = volatile.acidity, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'volatile acidity') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="Accent") +
labs(colour = "quality") +
ggtitle("Quality against Volatile Acidity and Alcohol") +
theme_dark()
ggplot(aes(x = volatile.acidity, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'volatile acidity') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="YIOrRd") +
labs(colour = "quality") +
ggtitle("Quality against Volatile Acidity and Alcohol") +
theme_dark()
ggplot(aes(x = volatile.acidity, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'volatile acidity') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="YlOrRd") +
labs(colour = "quality") +
ggtitle("Quality against Volatile Acidity and Alcohol") +
theme_dark()
ggplot(aes(x = sulphates, y = volatile.acidity, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'volatile acidity') +
scale_color_brewer(palette="YlOrRd") +
labs(colour = "quality") +
ggtitle("Quality against Sulphates and Volatile Acidity")
ggplot(aes(x = sulphates, y = volatile.acidity, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'volatile acidity') +
scale_color_brewer(palette="YlOrRd") +
labs(colour = "quality") +
ggtitle("Quality against Sulphates and Volatile Acidity") +
theme_dark()
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
scale_color_brewer(palette="YlOrRd") +
labs(colour = "quality") +
ggtitle("Quality against Sulphates and Alcohol") +
theme_dark()
ggplot(aes(x = sulphates, y = alcohol, color = quality.factor), data = redwines) +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(name = 'sulphates') +
scale_y_continuous(name = 'alcohol') +
labs(colour = "quality") +
scale_color_brewer(palette="YlOrRd") +
ggtitle("Quality against Sulphates and Alcohol") +
theme_dark()
ggplot(redwines, aes(quality, volatile.acidity)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'volatile acidity')
ggplot(redwines, aes(quality, volatile.acidity)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'volatile acidity')
ggplot(redwines, aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4),
outlier.shape = NA) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates', breaks = seq(0,2,0.2))
ggplot(redwines, aes(quality, sulphates)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates', breaks = seq(0,2,0.2))
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality)) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
plot1 <- ggplot(subset(redwines, sulphates < 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates less than 0.9')
plot2 <- ggplot(subset(redwines, sulphates >= 0.9), aes(quality, sulphates)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'sulphates') +
ggtitle('sulphates more than or equal to 0.9')
grid.arrange(plot1, plot2)
ggplot(redwines, aes(quality, alcohol)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'alcohol', breaks = seq(8,15,1))
ggplot(redwines, aes(quality, volatile.acidity)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'volatile acidity')
ggplot(redwines, aes(quality, volatile.acidity)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'volatile acidity')
ggplot(redwines, aes(quality, volatile.acidity)) +
geom_boxplot(aes(group=quality), outlier.shape = NA) +
geom_jitter(alpha = 0.2, position = position_jitter(width = 0.4)) +
scale_x_continuous(name = 'quality', breaks = seq(3,8,1)) +
scale_y_continuous(name = 'volatile acidity')
